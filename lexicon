import java.awt.Dimension;
import java.awt.List;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Map.Entry;
import java.util.*;
import java.lang.*;
import org.json.simple.JSONArray; 
import org.json.simple.JSONObject; 
import org.json.simple.parser.*; 
import opennlp.tools.stemmer.PorterStemmer;
import opennlp.tools.stemmer.Stemmer;
  
public class lexicon  
{ 
	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws ParseException, IOException   
    { 
		
    	
    	JSONParser parser = new JSONParser();
    	    JSONObject jsonObject;
			File f=new File("C:path here");
			 File[] listOfFiles = f.listFiles();
			 HashMap<Integer,String> map 
			    = new HashMap<>();
			 int p=1;
			 int i=1;
			 ArrayList<String> s2=new ArrayList<String>();
			 ArrayList<String> fileName=new ArrayList<String>();
			 PorterStemmer stemmer=new PorterStemmer();
			    for (int k = 0; k < listOfFiles.length; k++) {
			        if (listOfFiles[k].isFile()) {
			        	 fileName.add(listOfFiles[k].getName());
			        }}
			    System.out.println(fileName);
			    for(int l=0;l<fileName.size();l++) {
			    jsonObject = (JSONObject) parser.parse(new FileReader("folder path containing files\\"+fileName.get(l)));	
				String text = (String) jsonObject.get("text"); 
				String[] check=text.split(" ");
				String[] words = text.replaceAll("[^a-zA-Z0-9 ]", "").toLowerCase().split("\\s+");
				for(String s:words) {
					String stem = stemmer.stem(s);
					s2.add(stem);
				}
				while(i<s2.size()) {
					if(map.containsValue(s2.get(i))) {
						i++;
					}
					else {
						map.put(p,s2.get(i));
						i++;
						p++;
					}
				}}	 		
			    LinkedList<Map.Entry<Integer,String> > list = 
				        new LinkedList<Map.Entry<Integer,String> >(map.entrySet()); 
	      
				 // Sort the list 
				 Collections.sort(list, new Comparator<Map.Entry<Integer,String> >() { 
				     public int compare(Map.Entry<Integer,String> o1,  
				                        Map.Entry<Integer,String> o2) 
				     { 
				         return (o1.getValue()).compareTo(o2.getValue()); 
				     } 
				 }); 
				 // put data from sorted list to hashmap  
				 HashMap<Integer,String> temp = new LinkedHashMap<Integer,String>(); 
				 for (Map.Entry<Integer,String> aa : list) { 
				     temp.put(aa.getKey(), aa.getValue()); 
				 }
				 // print the sorted hashmap 
				 for (Map.Entry<Integer,String> en : temp.entrySet()) { 
				     System.out.println("Key = " + en.getKey() +  
				                   ", Value = " + en.getValue()); 
				 } 
				 TreeMap<Integer,String> sorted = new TreeMap<>(map); 
				 Set<Entry<Integer,String>> mappings = sorted.entrySet(); 
				 System.out.println("HashMap after sorting by keys in ascending order "); 
				 for(Entry<Integer,String> mapping : mappings){
					 System.out.println(mapping.getKey() + " ==> " + mapping.getValue()); 
					 }
				 try {
			         FileOutputStream fileOut =
			         new FileOutputStream("path of lexicon storage folder\\lexicon.ser");
			         ObjectOutputStream out = new ObjectOutputStream(fileOut);
			         out.writeObject(map);
			         out.close();
			         fileOut.close();
			         System.out.printf("Serialized data is saved in /tmp/employee.ser");
			      } catch (IOException n) {
			         n.printStackTrace();
			      }

				
			          
    }
} 
